@startuml

title __GAME's Class Diagram__\n

  namespace  {
    namespace ame {
      abstract class Game.Game {
          ~ maximumNumberOfPlayers : int
          ~ type : String
          + getMaximumNumberOfPlayers()
          + getRules()
          + getType()
          + setMaximumNumberOfPlayers()
          + setRules()
          + setType()
      }
    }
  }
  

  namespace  {
    namespace ame {
      class Game.TECard {
          {static} + ANSI_BLACK : String
          {static} + ANSI_RED : String
          {static} + ANSI_RESET : String
          ~ faceUp : boolean
          + getCardSymbol()
          + getSymbol()
          + getType()
          + getValue()
          + isFaceUp()
          + printBackOfCard()
          + printCard()
          + setFaceUp()
          + setSymbol()
          + setType()
          + setValue()
      }
    }
  }
  

  namespace  {
    namespace ame {
      class Game.TECards {
          ~ cardTypes : ArrayList<String>
          ~ cardsDeck : ArrayList<TECard>
          ~ faceCardTypes : ArrayList<String>
          ~ playerCards : HashMap<Integer, ArrayList<TECard>>
          ~ usedCards : ArrayList<TECard>
          + TECards()
          + changeValueOfAce()
          + checkExistenceOfAce()
          + generateCards()
          + getCardTypes()
          + getCardsDeck()
          + getFaceCardTypes()
          + getPlayerCards()
          + getUsedCards()
          + hit()
          + playerCardsTotalValue()
          + setCardTypes()
          + setCardsDeck()
          + setFaceCardTypes()
          + setPlayerCards()
          + setUsedCards()
      }
    }
  }
  

  namespace  {
    namespace ame {
      class Game.TrianteEna {
          ~ activePlayers : HashMap<Integer, Player>
          ~ bustedPlayers : HashMap<Integer, Player>
          ~ cashedOutPlayers : HashMap<Integer, Player>
          ~ extraAmountToBanker : int
          ~ idlePlayers : HashMap<Integer, Player>
          ~ standingPlayers : HashMap<Integer, Player>
          ~ totalPlayers : int
          + TrianteEna()
          + bankerTakesHit()
          + displayCards()
          + displayCardsToOthers()
          + getExtraAmountToBanker()
          + getTotalPlayers()
          + giveFirstCardsAndCollectBets()
          + giveTwoMoreCards()
          + hitOrStand()
          + initializeGame()
          + registerPlayers()
          + rotateBanker()
          + selectBanker()
          + setExtraAmountToBanker()
          + setTotalPlayers()
          {static} + sortByValue()
      }
    }
  }
  

  namespace  {
    namespace ame {
      class Game.TrianteEnaGame {
          + getMaximumNumberOfPlayers()
          + getRules()
          + getType()
          + setMaximumNumberOfPlayers()
          + setRules()
          + setType()
      }
    }
  }
  

  Game.Game o-- Rules.GameRules : rules
  Game.TECard -up-|> Players.Piece
  Game.TECards .up.|> Store.Cards
  Game.TrianteEna o-- Store.Bank : bank
  Game.TrianteEna o-- Game.TrianteEnaGame : game
  Game.TrianteEna o-- Game.TECards : teCards
  Game.TrianteEna o-- Rules.TrianteEnaRules : trianteEnaRules
  Game.TrianteEnaGame -up-|> Game.Game


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
